// Code generated by protoc-gen-go. DO NOT EDIT.
// source: linguist.proto

/*
Package linguist is a generated protocol buffer package.

It is generated from these files:
	linguist.proto

It has these top-level messages:
	LanguageRequest
	LanguageResponse
	Language
*/
package linguist

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LanguageRequest struct {
	RemoteURL string `protobuf:"bytes,1,opt,name=remoteURL" json:"remoteURL,omitempty"`
}

func (m *LanguageRequest) Reset()                    { *m = LanguageRequest{} }
func (m *LanguageRequest) String() string            { return proto.CompactTextString(m) }
func (*LanguageRequest) ProtoMessage()               {}
func (*LanguageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LanguageRequest) GetRemoteURL() string {
	if m != nil {
		return m.RemoteURL
	}
	return ""
}

type LanguageResponse struct {
	Language []*Language `protobuf:"bytes,1,rep,name=language" json:"language,omitempty"`
}

func (m *LanguageResponse) Reset()                    { *m = LanguageResponse{} }
func (m *LanguageResponse) String() string            { return proto.CompactTextString(m) }
func (*LanguageResponse) ProtoMessage()               {}
func (*LanguageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LanguageResponse) GetLanguage() []*Language {
	if m != nil {
		return m.Language
	}
	return nil
}

type Language struct {
	Name       string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Percentage float64 `protobuf:"fixed64,2,opt,name=percentage" json:"percentage,omitempty"`
}

func (m *Language) Reset()                    { *m = Language{} }
func (m *Language) String() string            { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()               {}
func (*Language) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Language) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Language) GetPercentage() float64 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

func init() {
	proto.RegisterType((*LanguageRequest)(nil), "LanguageRequest")
	proto.RegisterType((*LanguageResponse)(nil), "LanguageResponse")
	proto.RegisterType((*Language)(nil), "Language")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Linguist service

type LinguistClient interface {
	GetLanguages(ctx context.Context, in *LanguageRequest, opts ...grpc.CallOption) (*LanguageResponse, error)
}

type linguistClient struct {
	cc *grpc.ClientConn
}

func NewLinguistClient(cc *grpc.ClientConn) LinguistClient {
	return &linguistClient{cc}
}

func (c *linguistClient) GetLanguages(ctx context.Context, in *LanguageRequest, opts ...grpc.CallOption) (*LanguageResponse, error) {
	out := new(LanguageResponse)
	err := grpc.Invoke(ctx, "/Linguist/GetLanguages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Linguist service

type LinguistServer interface {
	GetLanguages(context.Context, *LanguageRequest) (*LanguageResponse, error)
}

func RegisterLinguistServer(s *grpc.Server, srv LinguistServer) {
	s.RegisterService(&_Linguist_serviceDesc, srv)
}

func _Linguist_GetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinguistServer).GetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Linguist/GetLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinguistServer).GetLanguages(ctx, req.(*LanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Linguist_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Linguist",
	HandlerType: (*LinguistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLanguages",
			Handler:    _Linguist_GetLanguages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "linguist.proto",
}

func init() { proto.RegisterFile("linguist.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xc9, 0xcc, 0x4b,
	0x2f, 0xcd, 0x2c, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xd2, 0xe7, 0xe2, 0xf7, 0x49,
	0xcc, 0x4b, 0x2f, 0x4d, 0x4c, 0x4f, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe1,
	0xe2, 0x2c, 0x4a, 0xcd, 0xcd, 0x2f, 0x49, 0x0d, 0x0d, 0xf2, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x42, 0x08, 0x28, 0x59, 0x72, 0x09, 0x20, 0x34, 0x14, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a,
	0xa9, 0x72, 0x71, 0xe4, 0x40, 0xc5, 0x24, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0x38, 0xf5, 0xe0,
	0x8a, 0xe0, 0x52, 0x4a, 0x76, 0x5c, 0x1c, 0x30, 0x51, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc,
	0x54, 0xa8, 0xf9, 0x60, 0xb6, 0x90, 0x1c, 0x17, 0x57, 0x41, 0x6a, 0x51, 0x72, 0x6a, 0x5e, 0x09,
	0xc8, 0x20, 0x26, 0x05, 0x46, 0x0d, 0xc6, 0x20, 0x24, 0x11, 0x23, 0x47, 0x2e, 0x0e, 0x1f, 0xa8,
	0xeb, 0x85, 0x4c, 0xb9, 0x78, 0xdc, 0x53, 0x4b, 0x60, 0xc6, 0x15, 0x0b, 0x09, 0xe8, 0xa1, 0x79,
	0x43, 0x4a, 0x50, 0x0f, 0xdd, 0x9d, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x5f, 0x1b, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xe8, 0x78, 0x81, 0x71, 0x07, 0x01, 0x00, 0x00,
}
